// author Aditya Prerepa, Akshay Trivedi & Nikhil Dhomse
syntax = "proto2";
option java_package = "com.car_rpc.generated";
option java_multiple_files = true;
option java_outer_classname = "ControllerProto";
package controller;

// Main Service: Communcation between phone and API
// ControlAcknowledge: Acknowledge a connection between the chip, phone, and API. Once
// 	this rpc is called, the server takes the host and port given by the app and tries to make
// 	a connection. If sucessful, the Socket will be stored in a ValueStore and later
// 	accessed by the {@link ControlService} rpc, where the request contains the key, for accessing the socket.
// ControlService: The main rpc that sends commands to the server, and recieves metrics after these commands
// 	are carried out by the esp8266. The command is a three-dimentional vector, and the response contains metrics
// 	that are displayed on the app.
service ControllerService {

    // Acknowledge RPC
    rpc ControlAcknowledgeService(ControlAcknowledge) returns (ControlAcknowledgeResponse) { }

    // Control RPC
    rpc ControlCommandService(ControlRequest) returns (ControlResponse) { }
}

// +++++++++++++++++++++++++++++++++++++++++ CONTROL - AFTER CONNECTION ACKNOWLEDGE +++++++++++++++++++++++++++++++++++++++++ //

// Vector3 is the format for the calibration of the gyroscope and accelorotmeraods
// in the phone. The calibration is used to find the desired velocities, acceleration,
// and directon of the car.
message Vector {
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

// Complete request sent to the @link Car-Rpc-Api. Contains a vector and a powerstate
// set by the app (manually by the user). powerState allows the user to turn the car
// off or on. ControllerKey is an authentication key to ensure the security of the
// connection.
message ControlRequest {
    required Vector axisPlane = 1;
    required bool powerState = 2;
    required int32 controllerKey = 3;
}

// Complete response to the ControlRequest. Gives optional metrics only if the status is OK,
// otherwise 0.
message ControlResponse {
    enum RequestStatusCode {
        MALFORMED_COMMAND = 0;
        UNABLE_TO_CONNECT_TO_ESP8266 = 1;
        INTERNAL_SERVER_ERROR = 2;
        INVALID_KEY = 3;
        OK = 4;
    }
    optional int32 hcsr04_front_distance = 1 [default = 0];
    optional int32 hcsr04_right_distance = 2 [default = 0];
    optional int32 hcsr04_left_distance = 3  [default = 0];
    required RequestStatusCode requestCode = 4;
}

// +++++++++++++++++++++++++++++++++++++++++ ACKNOWLEDGE - INITIAL STUFF +++++++++++++++++++++++++++++++++++++++++ //

// For beginning a connection between the controller and the API.
// The controller sends the address and port of the Esp8266.
// The controllerKey is a password to ensure the security of the connection.
message ControlAcknowledge {
    required string address = 1;
    required int32 port = 2;
    required int32 controllerKey = 3;
}
// For responding to the controller after they acknowledge.
// Contains a status code to determine whether or not the connection to the
// Esp8266 is feasible.
// todo add metrics
message ControlAcknowledgeResponse {
    enum Request_Status {
        INTERNAL_SERVER_ERROR = 0;
        UNABLE_TO_CONNECT_TO_ESP8266 = 1;
        OK = 2;
    }
    required Request_Status status = 1;
}
message ServerMetrics {

}
message XYZCoords {
    required float x = 1;
    required float y = 2;
    required float z = 3;
}
service MetricsResponse {
        rpc XYZService(XYZCoords) returns (ServerMetrics) {}

}

// +++++++++++++++++++++++++++++++++++++++++ END REGION +++++++++++++++++++++++++++++++++++++++++ //
