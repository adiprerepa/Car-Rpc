/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.0-dev */

#ifndef PB_ESP8266_ESP8266_INTERFACE_PB_H_INCLUDED
#define PB_ESP8266_ESP8266_INTERFACE_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Esp8266_Command {
    float frontRotation;
    float speed;
/* @@protoc_insertion_point(struct:Esp8266_Command) */
} Esp8266_Command;


typedef struct _Esp8266_Metrics {
    int32_t HCSR04_front_distance;
    int32_t HCSR04_left_distance;
    int32_t HCSR04_right_distance;
/* @@protoc_insertion_point(struct:Esp8266_Metrics) */
} Esp8266_Metrics;


typedef struct _Esp8266_Full_Request {
    Esp8266_Command command;
    bool powerState;
/* @@protoc_insertion_point(struct:Esp8266_Full_Request) */
} Esp8266_Full_Request;


/* Initializer values for message structs */
#define Esp8266_Command_init_default             {0, 0}
#define Esp8266_Full_Request_init_default        {Esp8266_Command_init_default, 0}
#define Esp8266_Metrics_init_default             {0, 0, 0}
#define Esp8266_Command_init_zero                {0, 0}
#define Esp8266_Full_Request_init_zero           {Esp8266_Command_init_zero, 0}
#define Esp8266_Metrics_init_zero                {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Esp8266_Command_frontRotation_tag        1
#define Esp8266_Command_speed_tag                2
#define Esp8266_Metrics_HCSR04_front_distance_tag 1
#define Esp8266_Metrics_HCSR04_left_distance_tag 2
#define Esp8266_Metrics_HCSR04_right_distance_tag 3
#define Esp8266_Full_Request_command_tag         1
#define Esp8266_Full_Request_powerState_tag      2

/* Struct field encoding specification for nanopb */
#define Esp8266_Command_FIELDLIST(X, a) \
X(a, STATIC, REQUIRED, FLOAT, frontRotation, 1) \
X(a, STATIC, REQUIRED, FLOAT, speed, 2)
#define Esp8266_Command_CALLBACK NULL
#define Esp8266_Command_DEFAULT NULL

#define Esp8266_Full_Request_FIELDLIST(X, a) \
X(a, STATIC, REQUIRED, MESSAGE, command, 1) \
X(a, STATIC, REQUIRED, BOOL, powerState, 2)
#define Esp8266_Full_Request_CALLBACK NULL
#define Esp8266_Full_Request_DEFAULT NULL
#define Esp8266_Full_Request_command_MSGTYPE Esp8266_Command

#define Esp8266_Metrics_FIELDLIST(X, a) \
X(a, STATIC, REQUIRED, INT32, HCSR04_front_distance, 1) \
X(a, STATIC, REQUIRED, INT32, HCSR04_left_distance, 2) \
X(a, STATIC, REQUIRED, INT32, HCSR04_right_distance, 3)
#define Esp8266_Metrics_CALLBACK NULL
#define Esp8266_Metrics_DEFAULT NULL

extern const pb_msgdesc_t Esp8266_Command_msg;
extern const pb_msgdesc_t Esp8266_Full_Request_msg;
extern const pb_msgdesc_t Esp8266_Metrics_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Esp8266_Command_fields &Esp8266_Command_msg
#define Esp8266_Full_Request_fields &Esp8266_Full_Request_msg
#define Esp8266_Metrics_fields &Esp8266_Metrics_msg

/* Maximum encoded size of messages (where known) */
#define Esp8266_Command_size                     10
#define Esp8266_Full_Request_size                14
#define Esp8266_Metrics_size                     33

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
